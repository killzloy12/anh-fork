#!/usr/bin/env python3
"""
üéõÔ∏è HANDLERS v3.0 - –ì–†–£–ë–´–ô –†–ï–ñ–ò–ú
üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∂–µ—Å—Ç–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º

–ò–°–ü–†–ê–í–õ–ï–ù–û:
‚Ä¢ –†–∞–±–æ—Ç–∞ –¢–û–õ–¨–ö–û –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
‚Ä¢ –ù–ï –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ  
‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏, –∫–æ–º–∞–Ω–¥–∞—Ö, —Ä–µ–ø–ª–µ—è—Ö
‚Ä¢ –õ–æ–≥–∏—Ä—É–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
‚Ä¢ –†–µ–¥–∫–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
"""

import logging
import re
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Sticker
from aiogram.filters import CommandStart, Command
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
last_activity_time = {}
bot_trigger_words = ["–±–æ—Ç", "bot", "—Ä–æ–±–æ—Ç", "–ø–æ–º–æ—â–Ω–∏–∫", "assistant", "—ç–π", "—Å–ª—É—à–∞–π"]

def register_all_handlers(dp, modules):
    """üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –≥—Ä—É–±–æ–º —Ä–µ–∂–∏–º–µ"""
    
    router = Router()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    bot_info = None
    
    async def get_bot_info():
        nonlocal bot_info
        try:
            bot_info = await modules['bot'].get_me()
            logger.info(f"ü§ñ –ë–æ—Ç: @{bot_info.username} ({bot_info.first_name})")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")
    
    asyncio.create_task(get_bot_info())
    
    # ================= –§–ò–õ–¨–¢–† –î–û–°–¢–£–ü–ê –ö –ß–ê–¢–ê–ú =================
    
    async def check_chat_access(message: Message) -> bool:
        """üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É"""
        config = modules['config']
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –≤–µ–∑–¥–µ
        if user_id in config.bot.admin_ids:
            return True
            
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
        if not config.bot.allowed_chat_ids:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if chat_id not in config.bot.allowed_chat_ids:
            logger.info(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —á–∞—Ç {chat_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
            return False
            
        return True
    
    # ================= –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô =================
    
    async def log_message(message: Message):
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            if modules.get('db'):
                await modules['db'].log_message(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    username=message.from_user.username or '',
                    full_name=message.from_user.full_name or '',
                    text=message.text or '',
                    message_type='text',
                    timestamp=datetime.now()
                )
                
            # –¢—Ä–µ–∫–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            if modules.get('analytics'):
                await modules['analytics'].track_user_action(
                    message.from_user.id, 
                    message.chat.id, 
                    'message_sent',
                    {
                        'text_length': len(message.text) if message.text else 0,
                        'chat_type': message.chat.type,
                        'has_reply': bool(message.reply_to_message)
                    }
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # ================= –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =================
    
    @router.message(CommandStart())
    async def start_handler(message: Message):
        """üöÄ –ö–æ–º–∞–Ω–¥–∞ /start"""
        if not await check_chat_access(message):
            return
            
        await log_message(message)
        
        user = message.from_user
        chat_type_text = "–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö" if message.chat.type == 'private' else f"—á–∞—Ç–µ **{message.chat.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}**"
        
        response = (
            f"üíÄ **–ì—Ä—É–±—ã–π –±–æ—Ç v3.0 –∑–∞–ø—É—â–µ–Ω**\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, **{user.first_name}**!\n"
            f"–†–∞–±–æ—Ç–∞—é –≤ {chat_type_text}\n\n"
            f"üî• **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n"
            f"‚Ä¢ –û—Ç–≤–µ—á–∞—é –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏\n"
            f"‚Ä¢ –õ–æ–≥–∏—Ä—É—é –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ –†–µ–¥–∫–æ –ø—Ä–æ—è–≤–ª—è—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            f"‚Ä¢ –ñ–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞\n\n"
            f"üí° /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        )
        
        await message.reply(response)
        logger.info(f"‚úÖ /start: {user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    
    @router.message(Command('help'))
    async def help_handler(message: Message):
        """üìñ –°–ø—Ä–∞–≤–∫–∞"""
        if not await check_chat_access(message):
            return
            
        await log_message(message)
        
        help_text = (
            "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n"
            "ü§ñ **–û—Å–Ω–æ–≤–Ω—ã–µ:**\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/ai [—Ç–µ–∫—Å—Ç] - AI –ø–æ–º–æ—â–Ω–∏–∫\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/about - –û –±–æ—Ç–µ\n\n"
            "üéØ **–ö–∞–∫ –º–µ–Ω—è –≤—ã–∑–≤–∞—Ç—å:**\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ '–±–æ—Ç' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã\n\n"
            "üíÄ **–†–∞–±–æ—Ç–∞—é –¢–û–õ–¨–ö–û –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö**"
        )
        
        await message.reply(help_text)
    
    @router.message(Command('about'))
    async def about_handler(message: Message):
        """‚ÑπÔ∏è –û –±–æ—Ç–µ"""
        if not await check_chat_access(message):
            return
            
        await log_message(message)
        
        active_modules = sum(1 for m in modules.values() if m is not None and m != modules.get('config') and m != modules.get('bot') and m != modules.get('db'))
        
        about_text = (
            "üíÄ **Enhanced Telegram Bot v3.0**\n"
            "**–ì—Ä—É–±—ã–π —Ä–µ–∂–∏–º**\n\n"
            "üéØ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö\n"
            "‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏\n"
            "‚Ä¢ –†–µ–¥–∫–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ñ–µ—Å—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞\n\n"
            f"üß© **–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:** {active_modules}\n"
            f"‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}"
        )
        
        await message.reply(about_text)
    
    @router.message(Command('stats'))
    async def stats_handler(message: Message):
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        if not await check_chat_access(message):
            return
            
        await log_message(message)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        stats_text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        
        try:
            if modules.get('db'):
                # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_stats = await modules['db'].get_user_stats(message.from_user.id)
                stats_text += f"üìù **–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {user_stats.get('total_messages', 0)}\n"
                stats_text += f"üóìÔ∏è **–ê–∫—Ç–∏–≤–µ–Ω —Å:** {user_stats.get('first_seen', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                stats_text += f"‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user_stats.get('last_seen', '—Å–µ–π—á–∞—Å')}\n"
            else:
                stats_text += "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            stats_text += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        await message.reply(stats_text)
    
    @router.message(Command('ai'))
    async def ai_handler(message: Message):
        """üß† AI –ø–æ–º–æ—â–Ω–∏–∫"""
        if not await check_chat_access(message):
            return
            
        await log_message(message)
        
        if not modules.get('ai'):
            await message.reply("‚ùå AI –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω")
            return
        
        user_message = message.text[4:].strip()
        if not user_message:
            await message.reply(
                "üí° **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "/ai [–≤–∞—à –≤–æ–ø—Ä–æ—Å]\n\n"
                "**–ü—Ä–∏–º–µ—Ä:**\n"
                "/ai –ö–∞–∫ –¥–µ–ª–∞?"
            )
            return
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
            response = await modules['ai'].generate_response(
                user_message, 
                message.from_user.id,
                {'chat_type': message.chat.type}
            )
            
            await message.reply(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–∞")
    
    # ================= –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =================
    
    @router.message(F.text)
    async def text_message_handler(message: Message):
        """üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –í–°–ï–ì–î–ê –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await log_message(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        if not await check_chat_access(message):
            return
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        if message.text.startswith('/'):
            return
            
        text_lower = message.text.lower()
        should_respond = False
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message and message.reply_to_message.from_user.id == modules['bot'].id:
            should_respond = True
            await handle_reply_to_bot(message, modules)
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for trigger_word in bot_trigger_words:
            if trigger_word in text_lower:
                should_respond = True
                break
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ (@username)
        if bot_info and f'@{bot_info.username.lower()}' in text_lower:
            should_respond = True
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –±–æ—Ç–∞
        if bot_info and bot_info.first_name.lower() in text_lower:
            should_respond = True
        
        # 5. –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º
        if message.chat.type == 'private':
            should_respond = True
        
        if should_respond:
            await handle_bot_mention(message, modules)
        
        # 6. –†–µ–¥–∫–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await handle_random_activity(message, modules)
    
    # ================= –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ü–õ–ï–ï–í –ù–ê –ë–û–¢–ê =================
    
    async def handle_reply_to_bot(message: Message, modules):
        """üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–ª–µ—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            logger.info(f"üí¨ –†–µ–ø–ª–µ–π –Ω–∞ –±–æ—Ç–∞ –æ—Ç {message.from_user.id}: {message.text}")
            
            if modules.get('ai'):
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                context_message = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {message.reply_to_message.text}\n\n–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}"
                
                response = await modules['ai'].generate_response(
                    context_message,
                    message.from_user.id,
                    {'is_reply': True, 'chat_type': message.chat.type}
                )
            else:
                responses = [
                    "–ü–æ–Ω—è–ª —Ç–µ–±—è",
                    "–Ø—Å–Ω–æ", 
                    "–ó–∞–ø–∏—Å–∞–ª",
                    "–û–∫–µ–π",
                    "–£—á—Ç—É"
                ]
                response = random.choice(responses)
            
            await message.reply(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–ø–ª–µ—è: {e}")
    
    # ================= –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–†–ê–©–ï–ù–ò–ô –ö –ë–û–¢–£ =================
    
    async def handle_bot_mention(message: Message, modules):
        """üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É"""
        try:
            logger.info(f"üéØ –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É –æ—Ç {message.from_user.id}: {message.text}")
            
            if modules.get('ai'):
                response = await modules['ai'].generate_response(
                    message.text,
                    message.from_user.id,
                    {'is_mention': True, 'chat_type': message.chat.type}
                )
            else:
                responses = [
                    "–ß—Ç–æ –Ω–∞–¥–æ?",
                    "–°–ª—É—à–∞—é",
                    "–ì–æ–≤–æ—Ä–∏", 
                    "–ß–µ?",
                    "–ù—É?",
                    "–ò —á—Ç–æ?",
                    "–î–∞?"
                ]
                response = random.choice(responses)
            
            await message.reply(response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
    
    # ================= –†–ï–î–ö–ê–Ø –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ =================
    
    async def handle_random_activity(message: Message, modules):
        """üé≤ –†–µ–¥–∫–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"""
        try:
            chat_id = message.chat.id
            config = modules['config']
            
            # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —à–∞–Ω—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0.1%)
            if random.random() > 0.999:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            now = datetime.now()
            if chat_id in last_activity_time:
                if now - last_activity_time[chat_id] < timedelta(hours=2):
                    return  # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
            last_activity_time[chat_id] = now
            
            random_responses = [
                "–ò —á—Ç–æ –¥–∞–ª—å—à–µ?",
                "–ù—É –∏?", 
                "–°–∫—É—á–Ω–æ...",
                "–ß—Ç–æ-—Ç–æ —Ç–∏—Ö–æ —Ç—É—Ç",
                "–í—Å–µ —Å–ø—è—Ç?",
                "–ö—Ç–æ —Ç—É—Ç?",
                "–ú-–¥–∞..."
            ]
            
            response = random.choice(random_responses)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–æ—Ç 5 –¥–æ 30 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(random.randint(5, 30))
            
            await modules['bot'].send_message(chat_id, response)
            logger.info(f"üé≤ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ {chat_id}: {response}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    # ================= –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–û–í =================
    
    @router.message(F.sticker)
    async def sticker_handler(message: Message):
        """üé≠ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
        if not await check_chat_access(message):
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∏–∫–µ—Ä
        try:
            if modules.get('db'):
                await modules['db'].log_message(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    username=message.from_user.username or '',
                    full_name=message.from_user.full_name or '',
                    text=f"[STICKER: {message.sticker.emoji}]",
                    message_type='sticker',
                    timestamp=datetime.now()
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        
        # –ò–Ω–æ–≥–¥–∞ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã
        if random.random() < 0.05:  # 5% —à–∞–Ω—Å
            sticker_responses = ["üëç", "üëé", "ü§î", "üòÑ", "üôÑ"]
            response = random.choice(sticker_responses)
            await message.reply(response)
    
    # ================= –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =================
    
    @router.message(Command('admin'))
    async def admin_handler(message: Message):
        """üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
        user_id = message.from_user.id
        if user_id not in modules['config'].bot.admin_ids:
            return
        
        if message.chat.type != 'private':
            await message.reply("üîí –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –≤ –õ–°")
            return
        
        admin_text = (
            "üëë **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å v3.0**\n\n"
            "üìä /logs - –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤\n"
            "üîÑ /reload - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã\n"
            "üìà /system_stats - –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üóëÔ∏è /clear_logs - –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏\n"
            "‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "üíÄ **–ì—Ä—É–±—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω**"
        )
        
        await message.reply(admin_text)
    
    @router.message(Command('logs'))
    async def logs_handler(message: Message):
        """üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        user_id = message.from_user.id
        if user_id not in modules['config'].bot.admin_ids:
            return
            
        try:
            if modules.get('db'):
                logs = await modules['db'].export_recent_logs(limit=1000)
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏
                log_text = "# –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ —á–∞—Ç–∞\n\n"
                for log in logs:
                    log_text += f"[{log['timestamp']}] {log['username']} ({log['user_id']}): {log['text']}\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                from io import StringIO
                log_file = StringIO(log_text)
                log_file.name = f"chat_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                
                await message.reply_document(
                    document=log_file,
                    caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ —á–∞—Ç–∞"
                )
            else:
                await message.reply("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("üéõÔ∏è –ì—Ä—É–±—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ v3.0 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    

def register_basic_handlers(dp, modules):
    """üîß –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"""
    register_all_handlers(dp, modules)


# ================= –≠–ö–°–ü–û–†–¢ =================

__all__ = ["register_all_handlers", "register_basic_handlers"]