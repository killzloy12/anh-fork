#!/usr/bin/env python3
"""
üíÄ ENHANCED TELEGRAM BOT v3.0 - –ì–†–£–ë–´–ô –†–ï–ñ–ò–ú
üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∂–µ—Å—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞

–ò–°–ü–†–ê–í–õ–ï–ù–û:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –û—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è, –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–µ–ø–ª–µ–∏
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import locale
    import codecs
    
    try:
        locale.setlocale(locale.LC_ALL, '')
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
        sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())
    except:
        pass

sys.path.insert(0, str(Path(__file__).parent))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

try:
    from config_harsh import load_config
    from database import DatabaseService
except ImportError as e:
    print(f"–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å {e.name}")
    print("–ò—Å–ø–æ–ª—å–∑—É–π config_harsh.py –∫–∞–∫ config.py")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    sys.exit(1)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
modules_available = False

try:
    from app.services.ai_service import AIService
    from app.services.analytics_service import AnalyticsService 
    from app.services.crypto_service import CryptoService
    from app.modules.memory_module import MemoryModule
    from app.modules.moderation_module import ModerationModule
    from app.modules.analytics_module import AnalyticsModule
    from app.modules.behavior_module import BehaviorModule
    from app.modules.stickers_module import StickersModule
    from app.modules.crypto_module import CryptoModule
    from app.modules.charts_module import ChartsModule
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ v3.0
    try:
        from app.modules.triggers_module_fixed import TriggersModule
    except ImportError:
        try:
            from app.modules.triggers_module import TriggersModule
        except ImportError:
            TriggersModule = None
    
    try:
        from app.modules.permissions_module_fixed import PermissionsModule
    except ImportError:
        try:
            from app.modules.permissions_module import PermissionsModule
        except ImportError:
            PermissionsModule = None
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
    from app.handlers.handlers_v3 import register_all_handlers
    
    modules_available = True
    
except ImportError as e:
    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–æ–¥—É–ª—å {e.name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    def register_all_handlers(dp, modules):
        from app.handlers.handlers_v3 import register_basic_handlers
        register_basic_handlers(dp, modules)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

async def setup_bot_commands(bot: Bot):
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    # –¢–û–õ–¨–ö–û –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´, –ë–ï–ó –ê–î–ú–ò–ù–°–ö–ò–•
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
        BotCommand(command="help", description="–ö–æ–º–∞–Ω–¥—ã"),
        BotCommand(command="ai", description="AI –ø–æ–º–æ—â–Ω–∏–∫"),
        BotCommand(command="crypto", description="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"),
        BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="about", description="–û –±–æ—Ç–µ"),
    ]
    
    await bot.set_my_commands(commands)
    logger.info("‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

async def main():
    """üíÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ì–†–£–ë–û–ì–û –∑–∞–ø—É—Å–∫–∞"""
    
    print("üíÄ –ì–†–£–ë–´–ô TELEGRAM BOT v3.0 - –ó–ê–ü–£–°–ö...")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories = [
            'data/logs', 'data/charts', 'data/exports', 'data/backups',
            'data/triggers', 'data/moderation', 'app/services', 'app/modules', 'app/handlers'
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler('data/logs/bot.log', encoding='utf-8')
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        ))
        logging.getLogger().addHandler(file_handler)
        
        config = load_config()
        
        if not config.bot.token:
            print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("1. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª .env")
            print("2. –°–∫–æ–ø–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ env_harsh.txt –≤ .env")
            print("3. –ó–∞–ø–æ–ª–Ω–∏ BOT_TOKEN –∏ ADMIN_IDS")
            print("4. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ ALLOWED_CHAT_IDS!")
            input("–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        if not config.bot.admin_ids:
            print("‚ùå –û–®–ò–ë–ö–ê: ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã!")
            print("–£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID –≤ .env —Ñ–∞–π–ª–µ")
            input("–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        if not config.bot.allowed_chat_ids:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ALLOWED_CHAT_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã!")
            print("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ–∑–¥–µ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
            print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã")
        
        bot = Bot(
            token=config.bot.token,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML
            )
        )
        
        dp = Dispatcher()
        
        print("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db_service = DatabaseService(config.database)
        await db_service.initialize()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        modules = {
            'config': config,
            'db': db_service,
            'bot': bot,
            'ai': None,
            'analytics_service': None,
            'crypto_service': None,
            'memory': None,
            'moderation': None,
            'analytics': None,
            'behavior': None,
            'stickers': None,
            'crypto': None,
            'charts': None,
            'triggers': None,
            'permissions': None
        }
        
        if modules_available:
            print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI...")
            if config.ai.openai_api_key or config.ai.anthropic_api_key:
                modules['ai'] = AIService(config)
                print("  ‚úÖ AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                print("  ‚ùå AI –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç –∫–ª—é—á–µ–π)")
            
            print("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
            modules['analytics_service'] = AnalyticsService(db_service)
            
            print("‚Çø –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ...")
            if config.crypto.enabled:
                modules['crypto_service'] = CryptoService(config)
                print("  ‚úÖ –ö—Ä–∏–ø—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                print("  ‚ùå –ö—Ä–∏–ø—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            
            print("üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
            modules['memory'] = MemoryModule(db_service)
            modules['moderation'] = ModerationModule(db_service, config) if config.moderation.enabled else None
            modules['analytics'] = AnalyticsModule(modules['analytics_service'])
            modules['behavior'] = BehaviorModule(db_service, modules['ai']) if modules['ai'] else None
            modules['stickers'] = StickersModule(db_service)
            modules['crypto'] = CryptoModule(modules['crypto_service']) if modules['crypto_service'] else None
            modules['charts'] = ChartsModule(db_service)
            
            print("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...")
            if TriggersModule:
                modules['triggers'] = TriggersModule(db_service, config)
            
            print("üîí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
            if PermissionsModule:
                modules['permissions'] = PermissionsModule(config)
            
            # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
            if modules['triggers']:
                await modules['triggers'].initialize()
            if modules['permissions']:
                await modules['permissions'].initialize()
            
            active_modules = sum(1 for m in modules.values() if m is not None and m != config and m != bot and m != db_service)
            print(f"  üíÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {active_modules}")
        
        else:
            print("‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º - –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
        print("üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ì–†–£–ë–´–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        register_all_handlers(dp, modules)
        print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        try:
            bot_info = await bot.get_me()
            print(f"  üíÄ –ü–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            print(f"  üìù –ò–º—è: {bot_info.first_name}")
            print(f"  üÜî ID: {bot_info.id}")
        except Exception as e:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")
            print("–ü—Ä–æ–≤–µ—Ä—å BOT_TOKEN")
            input("–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
        await setup_bot_commands(bot)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
        if config.bot.admin_ids:
            startup_message = (
                "üíÄ **–ì–†–£–ë–´–ô –ë–û–¢ v3.0 –ó–ê–ü–£–©–ï–ù!**\n\n"
                f"**–ë–æ—Ç:** @{bot_info.username}\n"
                f"**–†–µ–∂–∏–º:** –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–†–£–ë–´–ô\n"
                f"**–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:** {len(config.bot.allowed_chat_ids) if config.bot.allowed_chat_ids else '–í—Å–µ'}\n\n"
                "**üî• –û–°–û–ë–ï–ù–ù–û–°–¢–ò:**\n"
                "‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã\n"
                "‚Ä¢ –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–ø–ª–µ–∏ –∫ –±–æ—Ç—É\n"
                "‚Ä¢ –†–µ–¥–∫–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                "‚Ä¢ –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö\n\n"
                "**–ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!**"
            )
            
            for admin_id in config.bot.admin_ids:
                try:
                    await bot.send_message(admin_id, startup_message)
                    print(f"  üì§ –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω: {admin_id}")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {admin_id}: {e}")
        
        print("\n" + "=" * 50)
        print("üíÄ –ì–†–£–ë–´–ô –ë–û–¢ v3.0 –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!")
        print("=" * 50)
        print("\nüî• –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ì–†–£–ë–û–ì–û –†–ï–ñ–ò–ú–ê:")
        print("  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞")
        print("  ‚Ä¢ –û—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–æ—Ç—É") 
        print("  ‚Ä¢ –û—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ –∫–æ–º–∞–Ω–¥—ã")
        print("  ‚Ä¢ –û—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ —Ä–µ–ø–ª–µ–∏ –∫ –±–æ—Ç—É")
        print("  ‚Ä¢ –û—á–µ–Ω—å —Ä–µ–¥–∫–∞—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        print("  ‚Ä¢ –ñ–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º")
        
        if config.bot.allowed_chat_ids:
            print(f"\nüîí –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ß–ê–¢–´: {config.bot.allowed_chat_ids}")
        else:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º!")
        
        print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        
        try:
            await dp.start_polling(bot, skip_updates=True)
        except KeyboardInterrupt:
            print("\n‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        finally:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
            if modules.get('crypto_service'):
                await modules['crypto_service'].close()
            if modules.get('db'):
                await modules['db'].close()
            await bot.session.close()
            
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üí• –û–®–ò–ë–ö–ê: {e}")
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—å:")
        print("  1. BOT_TOKEN –≤ .env")
        print("  2. ADMIN_IDS –≤ .env") 
        print("  3. ALLOWED_CHAT_IDS –≤ .env")
        print("  4. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("  5. –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π")
        input("\n–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")